{
    "title": "@110 L2 - Labirinto Criando com Recurs\u00e3o",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@110 L2 - Labirinto Criando com Recurs\u00e3o</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <link rel=\"stylesheet\" href=\"/home/tiger/Dropbox/gits/0_tools/indexer/pandoc.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"l2---labirinto-criando-com-recurs\u00e3o\"><span class=\"citation\" data-cites=\"110\">@110</span> L2 - Labirinto Criando com Recurs\u00e3o</h2>\n<h2 id=\"qxcode\"><span class=\"citation\" data-cites=\"qxcode\">@qxcode</span></h2>\n<p>Crie um labirinto perfeito. Em um labirinto perfeito, entre dois pontos quaisquer existem apenas um caminho.</p>\n<p>Passe os par\u00e2metros de n\u00famero de linhas e de colunas atrav\u00e9s dos argumentos do programa.</p>\n<p>Leia sobre argc e argv ou use o exemplo abaixo.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode c\"><code class=\"sourceCode c\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">int</span> main(<span class=\"dt\">int</span> argc, <span class=\"dt\">char</span> * argv[]){</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span> nl = <span class=\"dv\">10</span>, nc = <span class=\"dv\">30</span>;</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span>(argc &gt; <span class=\"dv\">2</span>){</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        nl = atoi(argv[<span class=\"dv\">1</span>]);</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        nc = atoi(argv[<span class=\"dv\">2</span>]);</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    }</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span></code></pre></div>\n<p>Exemplo:</p>\n<pre><code>./gerar_matriz 15 40\n15 40\n########################################\n# #    # #    #       ## #  # # #   #  #\n#   # #    # #  #####     #     # #  # #\n## #  # ##  #  #    ## ##  # ###   #   #\n# #  #    # # # # #    # # #     # ## ##\n#  # # ## # # #   # ###     ### # #   ##\n##   ##   # #  # # #  # ####   #    #  #\n#  ##   ##  # #  #  # # #    #   ###  ##\n# ##  ## # # #  # #   #   # # # #   #  #\n#    ##    #   #  ## ##### #   #  #   ##\n#####   ######  #     #    # #   # # # #\n#    # #   #   #  ###   ##    ###   #  #\n## ##    ##  ### #   ###  # ##    #   ##\n#     ##    #      #     #     # #  #  #\n########################################</code></pre>\n<hr />\n<h2 id=\"algoritmo-recursivo\">Algoritmo Recursivo</h2>\n<p>O labirinto pode ser constru\u00eddo de forma recursiva:</p>\n<pre><code>bool pode_furar(posicao):\n    se quantidade de vizinhos com paredes menor que 3\n        retorne false\n    retorne true\n\nvoid derrubar_parede(mat, posicao):\n    if pode_furar(posicao)\n        matriz nessa posicao = &#39; &#39;\n    crie um vetor com os vizinhos\n    embaralhe o vetor de vizinho\n    chama derrubar_parede para todos os vizinhos\n\nint main():\n    criar &#39;matriz&#39;\n    colocar paredes em todas as posicoes da matriz\n    derrubar_parede(inicio)\n</code></pre>\n</body>\n</html>\n",
    "executionFiles": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "",
            "encoding": 0
        }
    ],
    "requiredFile": null
}
