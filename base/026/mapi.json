{
    "title": "@026 Build Linked List - push and pop",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@026 Build Linked List - push and pop</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <link rel=\"stylesheet\" href=\"/tmp/tmp_9jipmxw.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"build-linked-list---push-and-pop\"><span class=\"citation\" data-cites=\"026\">@026</span> Build Linked List - push and pop</h2>\n<!--TOC_BEGIN-->\n<ul>\n<li><a href=\"#arquivos\">Arquivos</a>\n<ul>\n<li><a href=\"#studentcpp\">student.cpp</a></li>\n<li><a href=\"#libhpp\">lib.hpp</a></li>\n<li><a href=\"#maincpp\">main.cpp</a></li>\n</ul></li>\n<li><a href=\"#testes\">Testes</a> <!--TOC_END--></li>\n</ul>\n<p>Seja a implementa\u00e7\u00e3o de uma lista ligada sem cabe\u00e7a e sem rabo. Implemente as fun\u00e7\u00f5es de - push_back - push_front - pop_back - pop_front - empty</p>\n<h2 id=\"arquivos\">Arquivos</h2>\n<h3 id=\"student.cpp\">student.cpp</h3>\n<!--ADD student.cpp cpp-->\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&quot;lib.hpp&quot;</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;iostream&gt;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">using</span> <span class=\"kw\">namespace</span> std;</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> LinkedList::push_back(<span class=\"dt\">int</span> value){</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> LinkedList::push_front(<span class=\"dt\">int</span> value){</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> LinkedList::pop_back(){</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> LinkedList::pop_front(){</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">int</span>  LinkedList::size(){</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> <span class=\"dv\">0</span>;</span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span></code></pre></div>\n<!--ADD_END-->\n<hr />\n<h3 id=\"lib.hpp\">lib.hpp</h3>\n<!--ADD lib.hpp cpp-->\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#pragma once</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;iostream&gt;</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;sstream&gt;</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">using</span> <span class=\"kw\">namespace</span> std;</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">struct</span> Node{</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span> value;</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Node * next;</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Node(<span class=\"dt\">int</span> value = <span class=\"dv\">0</span>, Node * next = <span class=\"kw\">nullptr</span>){</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">this</span>-&gt;value = value;</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">this</span>-&gt;next = next;</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    }</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>};</span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">struct</span> LinkedList{</span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Node * head {<span class=\"kw\">nullptr</span>};</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">//esses m\u00e9todos aqui s\u00e3o pra voc\u00ea implementar no arquivo student.cpp</span></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> push_back(<span class=\"dt\">int</span> value);</span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> push_front(<span class=\"dt\">int</span> value);</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> pop_back();</span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> pop_front();</span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span>  size();</span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\">//Os m\u00e9todos abaixo j\u00e1 est\u00e3o implementados abaixo da main</span></span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    LinkedList();</span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ~LinkedList();</span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">friend</span> ostream&amp; <span class=\"kw\">operator</span>&lt;&lt;(ostream&amp; os, LinkedList&amp; lista);</span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>};</span></code></pre></div>\n<!--ADD_END-->\n<hr />\n<h3 id=\"main.cpp\">main.cpp</h3>\n<!--ADD main.cpp cpp-->\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;iostream&gt;</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;sstream&gt;</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&quot;lib.hpp&quot;</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">using</span> <span class=\"kw\">namespace</span> std;</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">int</span> main(){</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    LinkedList ll;</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">while</span>(<span class=\"kw\">true</span>){</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        string line, cmd;</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"dt\">int</span> value;</span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        getline(cin, line);</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        cout &lt;&lt; <span class=\"st\">&quot;$&quot;</span> &lt;&lt; line &lt;&lt; endl;</span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        stringstream ss(line);</span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ss &gt;&gt; cmd;</span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span>(cmd == <span class=\"st\">&quot;end&quot;</span>){</span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">break</span>;</span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        }<span class=\"cf\">else</span> <span class=\"cf\">if</span>(cmd == <span class=\"st\">&quot;show&quot;</span>){</span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            cout &lt;&lt; ll &lt;&lt; endl;</span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        }<span class=\"cf\">else</span> <span class=\"cf\">if</span>(cmd == <span class=\"st\">&quot;push_back&quot;</span>){</span>\n<span id=\"cb3-20\"><a href=\"#cb3-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">while</span>(ss &gt;&gt; value)</span>\n<span id=\"cb3-21\"><a href=\"#cb3-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>                ll.push_back(value);</span>\n<span id=\"cb3-22\"><a href=\"#cb3-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        }<span class=\"cf\">else</span> <span class=\"cf\">if</span>(cmd == <span class=\"st\">&quot;push_front&quot;</span>){</span>\n<span id=\"cb3-23\"><a href=\"#cb3-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">while</span>(ss &gt;&gt; value)</span>\n<span id=\"cb3-24\"><a href=\"#cb3-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>                ll.push_front(value);</span>\n<span id=\"cb3-25\"><a href=\"#cb3-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        }<span class=\"cf\">else</span> <span class=\"cf\">if</span>(cmd == <span class=\"st\">&quot;pop_back&quot;</span>){</span>\n<span id=\"cb3-26\"><a href=\"#cb3-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>            ll.pop_back();</span>\n<span id=\"cb3-27\"><a href=\"#cb3-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        }<span class=\"cf\">else</span> <span class=\"cf\">if</span>(cmd == <span class=\"st\">&quot;pop_front&quot;</span>){</span>\n<span id=\"cb3-28\"><a href=\"#cb3-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>            ll.pop_back();</span>\n<span id=\"cb3-29\"><a href=\"#cb3-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        }<span class=\"cf\">else</span> <span class=\"cf\">if</span>(cmd == <span class=\"st\">&quot;size&quot;</span>){</span>\n<span id=\"cb3-30\"><a href=\"#cb3-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>            cout &lt;&lt; ll.size() &lt;&lt; endl;</span>\n<span id=\"cb3-31\"><a href=\"#cb3-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        }</span>\n<span id=\"cb3-32\"><a href=\"#cb3-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    }</span>\n<span id=\"cb3-33\"><a href=\"#cb3-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb3-34\"><a href=\"#cb3-34\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-35\"><a href=\"#cb3-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>LinkedList::LinkedList(){</span>\n<span id=\"cb3-36\"><a href=\"#cb3-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb3-37\"><a href=\"#cb3-37\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-38\"><a href=\"#cb3-38\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"dt\">void</span> destroy(Node * node){</span>\n<span id=\"cb3-39\"><a href=\"#cb3-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span>(node == <span class=\"kw\">nullptr</span>)</span>\n<span id=\"cb3-40\"><a href=\"#cb3-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span>;</span>\n<span id=\"cb3-41\"><a href=\"#cb3-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">else</span>{</span>\n<span id=\"cb3-42\"><a href=\"#cb3-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>        destroy(node-&gt;next);</span>\n<span id=\"cb3-43\"><a href=\"#cb3-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">delete</span>(node);</span>\n<span id=\"cb3-44\"><a href=\"#cb3-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>    }</span>\n<span id=\"cb3-45\"><a href=\"#cb3-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb3-46\"><a href=\"#cb3-46\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-47\"><a href=\"#cb3-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>LinkedList::~LinkedList(){</span>\n<span id=\"cb3-48\"><a href=\"#cb3-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>    destroy(head);</span>\n<span id=\"cb3-49\"><a href=\"#cb3-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb3-50\"><a href=\"#cb3-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>ostream&amp; <span class=\"kw\">operator</span>&lt;&lt;(ostream&amp; os, LinkedList&amp; lista){</span>\n<span id=\"cb3-51\"><a href=\"#cb3-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>    os &lt;&lt; <span class=\"st\">&quot;[ &quot;</span>;</span>\n<span id=\"cb3-52\"><a href=\"#cb3-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Node * node = lista.head;</span>\n<span id=\"cb3-53\"><a href=\"#cb3-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">while</span>(node != <span class=\"kw\">nullptr</span>){</span>\n<span id=\"cb3-54\"><a href=\"#cb3-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>        os &lt;&lt; node-&gt;value &lt;&lt; <span class=\"st\">&quot; &quot;</span>;</span>\n<span id=\"cb3-55\"><a href=\"#cb3-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>        node = node-&gt;next;</span>\n<span id=\"cb3-56\"><a href=\"#cb3-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>    }</span>\n<span id=\"cb3-57\"><a href=\"#cb3-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>    os &lt;&lt; <span class=\"st\">&quot;]&quot;</span>;</span>\n<span id=\"cb3-58\"><a href=\"#cb3-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> os;</span>\n<span id=\"cb3-59\"><a href=\"#cb3-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span></code></pre></div>\n<!--ADD_END-->\n<h2 id=\"testes\">Testes</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nshow\npush_back 1\nshow\nsize\nend\n========\n$show\n[ ]\n$push_back 1\n$show\n[ 1 ]\n$size\n1\n$end\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nshow\npush_back 1\nshow\npush_back 2 3 5 6 7\nshow\nend\n========\n$show\n[ ]\n$push_back 1\n$show\n[ 1 ]\n$push_back 2 3 5 6 7\n$show\n[ 1 2 3 5 6 7 ]\n$end\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nshow\npush_back 2 1\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\nend\n========\n$show\n[ ]\n$push_back 2 1\n$show\n[ 2 1 ]\n$pop_back\n$show\n[ 2 1 ]\n$pop_back\n$show\n[ 2 1 ]\n$pop_back\n$show\n[ 2 1 ]\n$end\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nshow\npush_front 1 2 3 4 5\nshow\nend\n========\n$show\n[ ]\n$push_front 1 2 3 4 5\n$show\n[ 5 4 3 2 1 ]\n$end\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nshow\npush_front 1 2 3 4\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\nend\n========\n$show\n[ ]\n$push_front 1 2 3 4\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$end\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n</code></pre>\n</body>\n</html>\n",
    "executionFiles": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "case=\ninput=show\npush_back 1\nshow\nsize\nend\noutput=\"$show\n[ ]\n$push_back 1\n$show\n[ 1 ]\n$size\n1\n$end\n\"\ngrade reduction=100%\n\ncase=\ninput=show\npush_back 1\nshow\npush_back 2 3 5 6 7\nshow\nend\noutput=\"$show\n[ ]\n$push_back 1\n$show\n[ 1 ]\n$push_back 2 3 5 6 7\n$show\n[ 1 2 3 5 6 7 ]\n$end\n\"\ngrade reduction=100%\n\ncase=\ninput=show\npush_back 2 1\nshow\npop_back\nshow\npop_back\nshow\npop_back\nshow\nend\noutput=\"$show\n[ ]\n$push_back 2 1\n$show\n[ 2 1 ]\n$pop_back\n$show\n[ 2 1 ]\n$pop_back\n$show\n[ 2 1 ]\n$pop_back\n$show\n[ 2 1 ]\n$end\n\"\ngrade reduction=100%\n\ncase=\ninput=show\npush_front 1 2 3 4 5\nshow\nend\noutput=\"$show\n[ ]\n$push_front 1 2 3 4 5\n$show\n[ 5 4 3 2 1 ]\n$end\n\"\ngrade reduction=100%\n\ncase=\ninput=show\npush_front 1 2 3 4\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\npop_front\nshow\nend\noutput=\"$show\n[ ]\n$push_front 1 2 3 4\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$pop_front\n$show\n[ 4 3 2 1 ]\n$end\n\"\ngrade reduction=100%\n",
            "encoding": 0
        },
        {
            "name": "lib.hpp",
            "contents": "#pragma once\n#include <iostream>\n#include <sstream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * next;\n    Node(int value = 0, Node * next = nullptr){\n        this->value = value;\n        this->next = next;\n    }\n};\n\nstruct LinkedList{\n    Node * head {nullptr};\n\n    //esses m\u00e9todos aqui s\u00e3o pra voc\u00ea implementar no arquivo student.cpp\n    void push_back(int value);\n    void push_front(int value);\n    void pop_back();\n    void pop_front();\n    int  size();\n\n    //Os m\u00e9todos abaixo j\u00e1 est\u00e3o implementados abaixo da main\n    LinkedList();\n    ~LinkedList();\n    friend ostream& operator<<(ostream& os, LinkedList& lista);\n};",
            "encoding": 0
        },
        {
            "name": "main.cpp",
            "contents": "#include <iostream>\n#include <sstream>\n#include \"lib.hpp\"\nusing namespace std;\n\nint main(){\n    LinkedList ll;\n    while(true){\n        string line, cmd;\n        int value;\n        getline(cin, line);\n        cout << \"$\" << line << endl;\n        stringstream ss(line);\n        ss >> cmd;\n        if(cmd == \"end\"){\n            break;\n        }else if(cmd == \"show\"){\n            cout << ll << endl;\n        }else if(cmd == \"push_back\"){\n            while(ss >> value)\n                ll.push_back(value);\n        }else if(cmd == \"push_front\"){\n            while(ss >> value)\n                ll.push_front(value);\n        }else if(cmd == \"pop_back\"){\n            ll.pop_back();\n        }else if(cmd == \"pop_front\"){\n            ll.pop_back();\n        }else if(cmd == \"size\"){\n            cout << ll.size() << endl;\n        }\n    }\n}\n\nLinkedList::LinkedList(){\n}\n\nvoid destroy(Node * node){\n    if(node == nullptr)\n        return;\n    else{\n        destroy(node->next);\n        delete(node);\n    }\n}\n\nLinkedList::~LinkedList(){\n    destroy(head);\n}\nostream& operator<<(ostream& os, LinkedList& lista){\n    os << \"[ \";\n    Node * node = lista.head;\n    while(node != nullptr){\n        os << node->value << \" \";\n        node = node->next;\n    }\n    os << \"]\";\n    return os;\n}",
            "encoding": 0
        },
        {
            "name": "solver.cpp",
            "contents": "//tk main.cpp\n#include \"lib.hpp\"\n#include <iostream>\nusing namespace std;\n\nNode * _push_back(Node * node, int value){\n    if(node == nullptr)\n        return new Node(value);\n    node->next = _push_back(node->next, value);\n    return node;\n}\n\nvoid LinkedList::push_back(int value){\n    this->head = _push_back(this->head, value);\n}\n\nvoid LinkedList::push_front(int value){\n    if(this->head == nullptr)\n        this->head = new Node(value);\n    else\n        this->head = new Node(value, this->head);\n}\n\nNode * _pop_back(Node * node){\n    if(node == nullptr)\n        return nullptr;\n    if(node->next == nullptr){\n        delete node;\n        return nullptr;\n    }\n    node->next = _pop_back(node->next);\n    return node;\n}\n\nvoid LinkedList::pop_back(){\n    this->head = (this->head);\n}\nvoid LinkedList::pop_front(){\n    if(head == nullptr)\n        return;\n    Node * node = head;\n    head = head->next;\n    delete node;\n}\nint  LinkedList::size(){\n    Node * node = head;\n    int cont = 0;\n    while(node != nullptr){\n        cont += 1;\n        node = node->next;\n    }\n    return cont;\n}",
            "encoding": 0
        }
    ],
    "requiredFile": {
        "name": "student.cpp",
        "contents": "#include \"lib.hpp\"\n#include <iostream>\nusing namespace std;\n\nvoid LinkedList::push_back(int value){\n\n}\nvoid LinkedList::push_front(int value){\n\n}\nvoid LinkedList::pop_back(){\n\n}\nvoid LinkedList::pop_front(){\n\n}\nint  LinkedList::size(){\n    return 0;\n}",
        "encoding": 0
    },
    "keep_size": 2
}
