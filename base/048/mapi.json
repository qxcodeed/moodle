{
    "title": "@048 L2 - Carregando \u00e1rvore a partir de String - Splitted files",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@048 L2 - Carregando \u00e1rvore a partir de String - Splitted files</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    span.underline{text-decoration: underline;}\n    div.column{display: inline-block; vertical-align: top; width: 50%;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    ul.task-list{list-style: none;}\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <link rel=\"stylesheet\" href=\"/tmp/tmpehtklxpe.css\" />\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<h2 id=\"l2---carregando-\u00e1rvore-a-partir-de-string---splitted-files\"><span class=\"citation\" data-cites=\"048\">@048</span> L2 - Carregando \u00e1rvore a partir de String - Splitted files</h2>\n<!--TOC_BEGIN-->\n<ul>\n<li><a href=\"#descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</a></li>\n<li><a href=\"#lib\">lib</a></li>\n<li><a href=\"#arquivos\">Arquivos</a></li>\n<li><a href=\"#testes\">Testes</a> <!--TOC_END--></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/qxcodeed/moodle/master/base/048/__capa.jpg\" /></p>\n<h2 id=\"descri\u00e7\u00e3o\">Descri\u00e7\u00e3o</h2>\n<ul>\n<li>Leia a string que representa a \u00e1rvore serializada.</li>\n<li>Voc\u00ea deve construir a \u00e1rvore a partir da string implemetando corretamente o construtor do c\u00f3digo de partida.</li>\n<li>Voc\u00ea pode entender a l\u00f3gica de serializa\u00e7\u00e3o no seguinte <a href=\"https://www.geeksforgeeks.org/serialize-deserialize-binary-tree/\">link</a>.</li>\n<li>A sa\u00edda \u00e9 a \u00e1rvore percorrida in-order, mas j\u00e1 est\u00e1 implementado.</li>\n</ul>\n<h2 id=\"lib\">lib</h2>\n<ul>\n<li>lib.hpp <!--ADD lib.hpp cpp--></li>\n</ul>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode cpp\"><code class=\"sourceCode cpp\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#pragma once</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"pp\">#include </span><span class=\"im\">&lt;iostream&gt;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">using</span> <span class=\"kw\">namespace</span> std;</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">struct</span> Node{</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">int</span> value;</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Node * left;</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Node * right;</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Node(<span class=\"dt\">int</span> value = <span class=\"dv\">0</span>, Node * left = <span class=\"kw\">nullptr</span>, Node * right = <span class=\"kw\">nullptr</span>){</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">this</span>-&gt;value = value;</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">this</span>-&gt;left = left;</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">this</span>-&gt;right = right;</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    }</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>};</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> BTree{</span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">public</span>:</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    Node * root {<span class=\"kw\">nullptr</span>};</span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    BTree(string serial); <span class=\"co\">//lib.hpp</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ~BTree();</span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> bshow();</span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> show_in_order();</span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">private</span>: <span class=\"co\">//recursive</span></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> destroy(Node * node);</span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> bshow(Node * node, string heranca);</span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">void</span> show_in_order(Node * node);</span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>};</span></code></pre></div>\n<!--ADD_END-->\n<h2 id=\"arquivos\">Arquivos</h2>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/qxcodeed/moodle/master/base/048/main.cpp\">main.cpp</a></li>\n<li><a href=\"https://raw.githubusercontent.com/qxcodeed/moodle/master/base/048/student.cpp\">student.cpp</a></li>\n<li><a href=\"https://raw.githubusercontent.com/qxcodeed/moodle/master/base/048/lib.h\">lib.h</a></li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<pre><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; um\n4 # # \n========\n[ 4 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dois\n1 # 0 # # \n========\n[ 1 0 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; tres\n4 # 8 2 # # # \n========\n[ 4 2 8 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; quatro\n0 9 4 # # # 5 # # \n========\n[ 4 9 0 5 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; cinco\n0 4 # # 2 0 # # 3 # # \n========\n[ 4 0 0 2 3 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; seis\n2 0 0 # # # 3 # 7 # 9 # # \n========\n[ 0 0 2 3 7 9 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; dez\n1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \n========\n[ 7 8 4 6 1 0 5 9 2 3 ]\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code></pre>\n</body>\n</html>\n",
    "executionFiles": [
        {
            "name": "vpl_evaluate.cases",
            "contents": "case=um\ninput=4 # # \noutput=\"[ 4 ]\n\"\ngrade reduction=100%\n\ncase=dois\ninput=1 # 0 # # \noutput=\"[ 1 0 ]\n\"\ngrade reduction=100%\n\ncase=tres\ninput=4 # 8 2 # # # \noutput=\"[ 4 2 8 ]\n\"\ngrade reduction=100%\n\ncase=quatro\ninput=0 9 4 # # # 5 # # \noutput=\"[ 4 9 0 5 ]\n\"\ngrade reduction=100%\n\ncase=cinco\ninput=0 4 # # 2 0 # # 3 # # \noutput=\"[ 4 0 0 2 3 ]\n\"\ngrade reduction=100%\n\ncase=seis\ninput=2 0 0 # # # 3 # 7 # 9 # # \noutput=\"[ 0 0 2 3 7 9 ]\n\"\ngrade reduction=100%\n\ncase=dez\ninput=1 8 7 # # 4 # 6 # # 5 0 # # 9 # 3 2 # # # \noutput=\"[ 7 8 4 6 1 0 5 9 2 3 ]\n\"\ngrade reduction=100%\n",
            "encoding": 0
        },
        {
            "name": "main.cpp",
            "contents": "#include <iostream>\n#include <sstream>\n#include \"lib.hpp\"\n\nusing namespace std;\n\nint main(){\n    string line;\n    getline(cin, line);\n    BTree bt(line);\n    bt.show_in_order();\n}\n\nBTree::~BTree(){\n    destroy(this->root);\n}\n\nvoid BTree::show_in_order(){\n    cout << \"[ \";\n    show_in_order(root);\n    cout << \"]\\n\";\n}\n\nvoid BTree::destroy(Node * node){\n    if(node == nullptr)\n        return;\n    destroy(node->left);\n    destroy(node->right);\n    delete node;\n}\n    \n\nvoid BTree::show_in_order(Node * node){\n    if(node == nullptr)\n        return;\n    show_in_order(node->left);\n    cout << node->value << \" \";\n    show_in_order(node->right);\n}\n",
            "encoding": 0
        },
        {
            "name": "lib.hpp",
            "contents": "#pragma once\n#include <iostream>\nusing namespace std;\n\nstruct Node{\n    int value;\n    Node * left;\n    Node * right;\n    Node(int value = 0, Node * left = nullptr, Node * right = nullptr){\n        this->value = value;\n        this->left = left;\n        this->right = right;\n    }\n};\n\nclass BTree{\npublic:\n    Node * root {nullptr};\n    BTree(string serial); //lib.hpp\n    ~BTree();\n    void bshow();\n    void show_in_order();\n\nprivate: //recursive\n    void destroy(Node * node);\n    void bshow(Node * node, string heranca);\n    void show_in_order(Node * node);\n};",
            "encoding": 0
        },
        {
            "name": "solver.cpp",
            "contents": "//tk main.cpp\n#include <sstream>\n#include <iostream>\n#include \"lib.hpp\"\nusing namespace std;\n\nvoid clone(stringstream& ss, Node ** elo){\n    string value;\n    ss >> value;\n    if(value == \"#\")\n        return;\n    int num;\n    stringstream(value) >> num;\n    *elo =  new Node(num);\n    clone(ss, &(**elo).left);\n    clone(ss, &(*elo)->right);\n}\n\nBTree::BTree(string serial){\n    stringstream ss(serial);\n    clone(ss, &root);\n}\n\n",
            "encoding": 0
        }
    ],
    "requiredFile": {
        "name": "student.cpp",
        "contents": "#include <sstream>\n#include <iostream>\n#include \"lib.hpp\"\nusing namespace std;\n\nBTree::BTree(string serial){\n    //TODO\n}\n\n",
        "encoding": 0
    },
    "keep_size": 2
}
